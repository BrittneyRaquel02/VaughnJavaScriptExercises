(function(){
  var myName = 'ivan';
  var print = function(name){
    console.log(name);
  }
  print(myName);
})();

///iife's are to keep you from overriding or polluting the global space 


class Restaurant {
  constructor(numberOfTables, hasPatio){
   this.totalTables  = numberOfTables;
   this.isOpen = true;
   this.patio = hasPatio;
  }
}


class Counter {
  constructor(startCount){
    this.startCount = startCount;
  }
  count(){
    this.startCount++;
    console.log(this.startCount);
  }
}

var counter1 = new Counter(7);
counter1.count();
counter1.count();

var diner = new Restaurant(10, true);
var cafe = new Restaurant (20, false);
console.log(diner, cafe);

//OOP in JS



https://regex101.com/





class Restaurant {
  constructor(numberOfTables, hasPatio){
   this.totalTables  = numberOfTables;
   this.reservedTable = [];
   this.isOpen = true;
   this.patio = hasPatio;
  }
    reserveTable(tableNumber){
  this.reservedTable.push(tableNumber);
  }
listOpenTables(){ 
  console.log(this.totalTable - this.reservedTable.length);
}
}

class LuxeryRestaurant extends Restaurant {
  constructor(config){
    super(config);
   this.hasBar = config.hasBar;
   this.privateRoom = config.privateRoom
   this.reservationRequired = config.reservationRequired
  }
}

var options = {
  totalTables: 10,
  patio: true,
  hasBar: 10,
  privateRoom: 2,
  reservationRequired: true
  
};
var diner = new Restaurant(10, true);
diner.reserveTable(1);
diner.reserveTable(2);
diner.listOpenTables();
console.log(diner)


var luxery = new LuxeryRestaurant({totalTables: 10, patio: true})
console.log(luxery);
luxery.listOpenTables();



class Counter {
  constructor(start){
    this.start = start;
  }
  count(){
    this.start++;
    console.log(this.start);
  }
}

var counter1 = new Counter(1);
counter1.count();

class CounterByTwo extends Counter {
  constructor(start) {
    super (start);
  }
  count(){
    this.start += 2;
    console.log(this.start);
  }
}
//excercise
